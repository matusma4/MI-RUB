var search_data = {"index":{"searchIndex":["algorithm","ariadninanittest","cave","labyrinth","path","states","add_paths()","get_cave()","get_next_path()","get_path()","get_path_home()","go_there()","new()","new()","new()","new()","solve()","test_1()","test_2()","test_3()","test_4()","to_s()","use_path()","input1","input2"],"longSearchIndex":["algorithm","ariadninanittest","cave","labyrinth","path","states","labyrinth#add_paths()","labyrinth#get_cave()","algorithm#get_next_path()","labyrinth#get_path()","algorithm#get_path_home()","algorithm#go_there()","algorithm::new()","cave::new()","labyrinth::new()","path::new()","algorithm#solve()","ariadninanittest#test_1()","ariadninanittest#test_2()","ariadninanittest#test_3()","ariadninanittest#test_4()","path#to_s()","path#use_path()","",""],"info":[["Algorithm","","Algorithm.html","",""],["AriadninaNitTest","","AriadninaNitTest.html","",""],["Cave","","Cave.html","","<p>Cave class represents a cave in the labyrinth Has information about the\nCaves directly connected with ...\n"],["Labyrinth","","Labyrinth.html","","<p>Class which holds information about the Labyrinth - caves and paths between\nthem methods: constructor ...\n"],["Path","","Path.html","","<p>Path class represents a connection between two Caves inside the Labyrinth\nHas information about the position ...\n"],["States","","States.html","","<p>class used when parsing the input file - reading labyrinth specification\n"],["add_paths","Labyrinth","Labyrinth.html#method-i-add_paths","(l)","<p>used by constructor - adds paths to the labyrinth\n"],["get_cave","Labyrinth","Labyrinth.html#method-i-get_cave","(id)","<p>get cave by id\n"],["get_next_path","Algorithm","Algorithm.html#method-i-get_next_path","()","<p>find out where to go based on previous moves and marks used only for going\nTHERE\n"],["get_path","Labyrinth","Labyrinth.html#method-i-get_path","(f, t)","<p>get path between these two caves\n"],["get_path_home","Algorithm","Algorithm.html#method-i-get_path_home","()","<p>find out where to go based on previous moves and marks from the way THERE\nused only for going BACK\n"],["go_there","Algorithm","Algorithm.html#method-i-go_there","(actual_path)","<p>make an actual move from one cave to another\n"],["new","Algorithm","Algorithm.html#method-c-new","(arguments)",""],["new","Cave","Cave.html#method-c-new","(input_line)",""],["new","Labyrinth","Labyrinth.html#method-c-new","(input_file)",""],["new","Path","Path.html#method-c-new","(from, to)",""],["solve","Algorithm","Algorithm.html#method-i-solve","()","<p>core method where the path THERE and BACK is found\n"],["test_1","AriadninaNitTest","AriadninaNitTest.html#method-i-test_1","()",""],["test_2","AriadninaNitTest","AriadninaNitTest.html#method-i-test_2","()",""],["test_3","AriadninaNitTest","AriadninaNitTest.html#method-i-test_3","()",""],["test_4","AriadninaNitTest","AriadninaNitTest.html#method-i-test_4","()",""],["to_s","Path","Path.html#method-i-to_s","()",""],["use_path","Path","Path.html#method-i-use_path","(count)","<p>go through this Path and leave an appropriate mark\n"],["input1","","input1.html","","<p>6 1 3 4 2 3 6 3 1 2 4 1 5 0 6 2\n"],["input2","","input2.html","","<p>10 1 3 5 6 7 8 9 2 9 3 1 5 4 6 7 8 9 10 5 1 3 7 8 6 1 4 7 7 1 4 5 6 8 8 1 4\n5 7 10 9 1 2 4 10 4 8 11 ...\n"]]}}